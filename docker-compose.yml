
services:
  nethermind:
    image: nethermind/nethermind:latest
    container_name: starknet-nethermind
    restart: unless-stopped
    ports:
      - "8545:8545"     # JSON-RPC HTTP
      - "8546:8546"     # JSON-RPC WebSocket
      - "8551:8551"     # Engine API
      - "30303:30303"   # P2P
    volumes:
      - ${NETHERMIND_DATA_DIR:-./data}/nethermind:/nethermind/data
      - ./config/jwt.hex:/nethermind/jwt.hex:ro
    command: >
      --config mainnet
      --data-dir /nethermind/data
      --Sync.FastSync true
      --Sync.SnapSync true
      --Sync.FastBlocks true
      --Sync.DownloadHeadersInFastSync true
      --Sync.DownloadBodiesInFastSync true
      --Sync.DownloadReceiptsInFastSync true
      --Sync.TuneDbMode HeavyWrite
      --Pruning.Mode=Hybrid
      --Pruning.FullPruningTrigger=VolumeFreeSpace
      --Pruning.FullPruningThresholdMb=204800
      --Pruning.CacheMb=2048
      --Db.StateDbWriteBufferSize=409600000
      --Init.StateDbKeyScheme=HalfPath
      --Network.MaxActivePeers 25
      --Network.EnableUPnP true
      --Network.MaxOutgoingConnectPerSec 10
      --Network.StaticPeers "enode://d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666@18.138.108.67:30303,enode://22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de@3.209.45.79:30303"
      --JsonRpc.Enabled true
      --JsonRpc.Host 0.0.0.0
      --JsonRpc.Port 8545
      --JsonRpc.WebSocketsPort 8546
      --JsonRpc.EngineHost 0.0.0.0
      --JsonRpc.EnginePort 8551
      --JsonRpc.JwtSecretFile /nethermind/jwt.hex
      --JsonRpc.EnabledModules Eth,Subscribe,Trace,TxPool,Web3,Personal,Proof,Net,Parity,Health,Rpc,Engine
      --log info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - starknet-network

  lighthouse:
    image: sigp/lighthouse:latest
    container_name: starknet-lighthouse
    restart: unless-stopped
    init: true
    ports:
      - "9000:9000"     # P2P
      - "5052:5052"     # HTTP API
    volumes:
      - ${LIGHTHOUSE_DATA_DIR:-./data}/lighthouse:/opt/lighthouse/data
      - ./config/jwt.hex:/opt/lighthouse/jwt.hex:ro
    command: >
      lighthouse bn
      --network mainnet
      --datadir /opt/lighthouse/data
      --http
      --http-address 0.0.0.0
      --http-port 5052
      --execution-endpoint http://nethermind:8551
      --execution-jwt /opt/lighthouse/jwt.hex
      --checkpoint-sync-url https://mainnet.checkpoint.sigp.io
      --disable-deposit-contract-sync
      --state-cache-headroom 8
      --epochs-per-blob-prune 128
      --blob-prune-margin-epochs 16
    depends_on:
      - nethermind
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5052/eth/v1/node/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - starknet-network

  juno-snapshot:
    image: curlimages/curl:latest
    container_name: starknet-juno-snapshot
    user: root
    volumes:
      - ${JUNO_DATA_DIR:-./data}/juno:/var/lib/juno
    environment:
      - SNAPSHOT_URL=https://juno-snapshots.nethermind.io/files/mainnet/latest
    command: >
      sh -c "
      if [ ! -f /var/lib/juno/.snapshot_downloaded ] || [ ! -f /var/lib/juno/CURRENT ]; then
        echo 'Downloading/resuming Juno snapshot... This may take 30-60 minutes';
        if curl -C - -o /var/lib/juno/juno_mainnet.tar \"$${SNAPSHOT_URL}\"; then
          echo 'Download completed, verifying tar file...';
          if tar -tf /var/lib/juno/juno_mainnet.tar >/dev/null 2>&1; then
            echo 'Tar file verified, extracting snapshot...';
            rm -rf /var/lib/juno/*.sst /var/lib/juno/CURRENT /var/lib/juno/LOCK /var/lib/juno/LOG* /var/lib/juno/MANIFEST* /var/lib/juno/OPTIONS*;
            mkdir -p /var/lib/juno;
            if tar -xf /var/lib/juno/juno_mainnet.tar -C /var/lib/juno; then
              echo 'Extraction successful, verifying database files...';
              if [ -f /var/lib/juno/CURRENT ] && [ \"\$(ls /var/lib/juno/*.sst 2>/dev/null | wc -l)\" -gt 100 ]; then
                rm -f /var/lib/juno/juno_mainnet.tar;
                touch /var/lib/juno/.snapshot_downloaded;
                echo 'Snapshot downloaded and extracted successfully!';
              else
                echo 'ERROR: Extraction incomplete - missing database files';
                exit 1;
              fi;
            else
              echo 'ERROR: Tar extraction failed';
              exit 1;
            fi;
          else
            echo 'ERROR: Downloaded tar file is corrupted';
            exit 1;
          fi;
        else
          echo 'ERROR: Download failed';
          exit 1;
        fi;
      else
        echo 'Snapshot already exists, skipping download';
      fi
      "
    networks:
      - starknet-network

  juno:
    image: nethermind/juno:latest
    container_name: starknet-juno
    restart: unless-stopped
    ports:
      - "6060:6060"     # HTTP API
      - "6061:6061"     # WebSocket API
    volumes:
      - ${JUNO_DATA_DIR:-./data}/juno:/var/lib/juno
      - ./config/juno.yaml:/etc/juno/juno.yaml:ro
      - ./config/validator.key:/var/lib/juno/validator.key:ro
    environment:
      - VALIDATOR_NAME=${VALIDATOR_NAME:-starknet-validator}
      - OPERATIONAL_ADDRESS=${OPERATIONAL_ADDRESS}
    command: >
      --config /etc/juno/juno.yaml
      --db-path /var/lib/juno
      --http
      --http-port 6060
      --http-host 0.0.0.0
      --log-level INFO
      --max-vms 8
      --max-vm-queue 16
      --pending-poll-interval 5s
    depends_on:
      - lighthouse
      - juno-snapshot
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6060/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    networks:
      - starknet-network
    deploy:
      resources:
        limits:
          memory: 12G
          cpus: '6'
        reservations:
          memory: 6G
          cpus: '3'
    tmpfs:
      - /tmp:size=2G,noatime

  prometheus:
    image: prom/prometheus:latest
    container_name: starknet-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${PROMETHEUS_DATA_DIR:-./data}/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - starknet-network

  grafana:
    image: grafana/grafana:latest
    container_name: starknet-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - ${GRAFANA_DATA_DIR:-./data}/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - starknet-network

  starknet-validator:
    image: nethermind/starknet-staking-v2:latest
    container_name: starknet-validator
    restart: unless-stopped
    ports:
      - "8081:8080"     # Metrics port
    environment:
      - VALIDATOR_NAME=${VALIDATOR_NAME:-starknet-validator}
      - OPERATIONAL_ADDRESS=${OPERATIONAL_ADDRESS}
      - VALIDATOR_PRIVATE_KEY=${VALIDATOR_PRIVATE_KEY}
    command: >
      --provider-http http://juno:6060/v0_8
      --provider-ws ws://juno:6061/v0_8
      --signer-op-address ${OPERATIONAL_ADDRESS}
      --signer-priv-key ${VALIDATOR_PRIVATE_KEY}
      --metrics
      --metrics-host 0.0.0.0
      --metrics-port 8080
      --log-level info
    depends_on:
      - juno
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - starknet-network

networks:
  starknet-network:
    driver: bridge

volumes:
  nethermind-data:
  lighthouse-data:
  juno-data:
  prometheus-data:
  grafana-data: